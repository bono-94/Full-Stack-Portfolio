# Generated by Django 3.2.18 on 2023-05-01 23:19

import cloudinary_storage.storage
import cloudinary_storage.validators
import django.core.validators
from django.db import migrations, models
import projects.models


class Migration(migrations.Migration):

    dependencies = [
        ('projects', '0056_alter_profile_cv'),
    ]

    operations = [
        migrations.AlterField(
            model_name='profile',
            name='bigger_fish_results',
            field=models.ImageField(blank=True, null=True, upload_to='bigger_fish_results/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png']), projects.models.Profile.validate_file_name_length]),
        ),
        migrations.AlterField(
            model_name='profile',
            name='daily_routine',
            field=models.FileField(blank=True, max_length=84, null=True, storage=cloudinary_storage.storage.RawMediaCloudinaryStorage(), upload_to='daily_routine/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['xlsx', 'xls', 'xlsm', 'xlsb', 'csv', 'parquet']), projects.models.Profile.validate_file_name_length]),
        ),
        migrations.AlterField(
            model_name='profile',
            name='profile_audio',
            field=models.FileField(blank=True, null=True, storage=cloudinary_storage.storage.VideoMediaCloudinaryStorage(), upload_to='profile_audio/', validators=[projects.models.Profile.validate_file_name_length]),
        ),
        migrations.AlterField(
            model_name='profile',
            name='projects_portfolio',
            field=models.FileField(blank=True, null=True, storage=cloudinary_storage.storage.RawMediaCloudinaryStorage(), upload_to='portfolios/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['doc', 'docx', 'pdf', 'zip']), projects.models.Profile.validate_file_name_length]),
        ),
        migrations.AlterField(
            model_name='profile',
            name='user_video',
            field=models.FileField(blank=True, null=True, storage=cloudinary_storage.storage.VideoMediaCloudinaryStorage(), upload_to='user-videos/', validators=[cloudinary_storage.validators.validate_video, projects.models.Profile.validate_file_name_length]),
        ),
    ]
